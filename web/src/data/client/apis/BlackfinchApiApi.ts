/* tslint:disable */
/* eslint-disable */
/**
 * Blackfinch.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLoanApplicationRequest,
  LoanTotalApplicantsGet200Response,
} from '../models/index';
import {
    CreateLoanApplicationRequestFromJSON,
    CreateLoanApplicationRequestToJSON,
    LoanTotalApplicantsGet200ResponseFromJSON,
    LoanTotalApplicantsGet200ResponseToJSON,
} from '../models/index';

export interface LoanApplyPostRequest {
    createLoanApplicationRequest: Omit<CreateLoanApplicationRequest, 'loanToValuePercent'>;
}

/**
 * 
 */
export class BlackfinchApiApi extends runtime.BaseAPI {

    /**
     */
    async loanApplyPostRaw(requestParameters: LoanApplyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createLoanApplicationRequest'] == null) {
            throw new runtime.RequiredError(
                'createLoanApplicationRequest',
                'Required parameter "createLoanApplicationRequest" was null or undefined when calling loanApplyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/loan/apply`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLoanApplicationRequestToJSON(requestParameters['createLoanApplicationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async loanApplyPost(requestParameters: LoanApplyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.loanApplyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loanMeanLtvGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/loan/mean-ltv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async loanMeanLtvGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.loanMeanLtvGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loanTotalApplicantsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanTotalApplicantsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/loan/total-applicants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanTotalApplicantsGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async loanTotalApplicantsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanTotalApplicantsGet200Response> {
        const response = await this.loanTotalApplicantsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loanTotalValueGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/loan/total-value`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async loanTotalValueGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.loanTotalValueGetRaw(initOverrides);
        return await response.value();
    }

}
